{"version":3,"sources":["components/Header/Header.jsx","components/Button/Button.jsx","constants/mainButtonsData.js","components/Main/Main.jsx","components/About/About.jsx","components/Poem/Poem.jsx","components/Footer/Footer.jsx","components/TaskForm/TaskFormSelect/TaskFormSelect.jsx","constants/formData.js","components/TaskForm/TaskForm.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","src","alt","Button","props","onClick","onPress","placeholder","mainButtonsData","Buttons","showTaskForm","About","Poem","Footer","TaskFormSelect","name","label","optionList","selectOption","onChange","map","item","num","value","taskFormData","taskFormPlaceholders","taskButtonPlaceholders","taskFormLabels","taskFormTypeList","taskFormSubtypeList","buttonData","TaskForm","useState","workType","setWorkType","workSubtype","setWorkSubtype","workConfirmation","setWorkConfirmation","workStatus","setWorkStatus","selectedWorkType","selectedWorkSubtype","console","log","cn","visibility","e","target","closest","formClose","type","required","minLength","disabled","rows","App","taskShow","setTaskShow","hideTaskPopup","hideTaskForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40cc2be7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <header className='header'>\r\n      <div className='header__container'>\r\n        <a className='header__link' href='#'>\r\n        <img className='header__img' src='#' alt='logo' />\r\n        </a>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\n\r\nconst Button = (props) => {\r\n\r\n  return (\r\n    <button className='button' onClick={props.onPress}>{props.placeholder}</button>\r\n  )\r\n}\r\n\r\nexport default Button;\r\n","export const mainButtonsData = {\r\n  showTasks: 'Мои заявки',\r\n  createTask: 'Создать заявку'\r\n}","import React from 'react';\r\nimport Button from '../Button/Button';\r\nimport {mainButtonsData} from '../../constants/mainButtonsData';\r\nimport './Main.css';\r\n\r\nconst Buttons = (props) => {\r\n\r\n  return (\r\n    <section className='main'>\r\n        <h2 className='main__title'>Заголовок</h2>\r\n        <div className='main__buttons-container'>\r\n          <Button placeholder={mainButtonsData.showTasks}/>\r\n          <Button placeholder={mainButtonsData.createTask} onPress={props.showTaskForm}/>\r\n        </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport './About.css';\r\n\r\nconst About = () => {\r\n\r\n  return (\r\n    <section className='about'>\r\n        <h2 className='about__title'>Как это работает</h2>\r\n        <article className='about__info'>Контент</article>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport './Poem.css';\r\n\r\nconst Poem = () => {\r\n\r\n  return (\r\n    <section className='poem'>\r\n        <article className='poem__content'>Стих</article>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Poem;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n\r\n  return (\r\n    <footer className='footer'>\r\n      <p className='footer__title'>Футер</p>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;\r\n","import './TaskFormSelect.css'\r\n\r\nconst TaskFormSelect = ({name, label, optionList, selectOption}) => {\r\n\r\n  // console.log('optionlist - '+optionList)\r\n\r\n  return (\r\n    <select className='select' name={name} label={label} onChange={selectOption}>\r\n      {optionList.map((item, num) => {\r\n        return (\r\n          <option key={num} className='select__option' value={num}>{item}</option>\r\n        )\r\n      })}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default TaskFormSelect;","export const taskFormData = {\r\n  title: 'Заявка на ремонт',\r\n  workType: 'Мне нужно',\r\n  workSubtype: 'Подробнее, что нужно',\r\n  workDescription: 'В нескольких словах, что именно нужно',\r\n  name: 'Имя заявителя',\r\n  phone: 'Телефон заявителя',\r\n  email: 'e-mail заявителя'\r\n}\r\n\r\nexport const taskFormPlaceholders = {\r\n  workDescription: 'Опишите работу',\r\n  clientName: 'Введите свое имя',\r\n  clientPhone: 'Введите телефон',\r\n  clientEmail: 'Введите email',\r\n  clientFeedback: 'Оставьте отзыв после выполнения работы'\r\n}\r\n\r\nexport const taskButtonPlaceholders = {\r\n  confirmed: 'В работе',\r\n  notConfirmed: 'Ожидает мастера',\r\n  finished: 'Выполнена',\r\n  notFinished: 'Не выполнена'\r\n}\r\n\r\nexport const taskFormLabels = {\r\n  workType: 'Услуга',\r\n  workSubtype: 'Подкатегория услуги',\r\n}\r\n\r\nexport const taskFormTypeList = [\r\n  'Электрика',\r\n  'Сантехника',\r\n  'Отделочные работы',\r\n  'Мебель, двери, окна',\r\n  'Компьютерная помощь',\r\n  'Уборка',\r\n]\r\n\r\nexport const taskFormSubtypeList = [\r\n  [\r\n    'Установка или замена розеток',\r\n    'Ремонт электропроводки',\r\n    'Замена оборудования',\r\n    'Ремонт электроприборов'\r\n  ],\r\n  [\r\n    'Ремонт сантехнических приборов',\r\n    'Установка или замена сантехнических приборов',\r\n    'Устранение засоров и прочистка фильтров',\r\n    'Ремонт или замена трубопроводов и арматуры',\r\n    'Ремонт или замена отопительных приборов'\r\n  ],\r\n  [\r\n    'Поклейка обоев',\r\n    'Покраска стен и потолка',\r\n    'Укладка плитки',\r\n    'Комплексная подготовка и отделка помещений'\r\n  ],\r\n  [\r\n    'Сборка мебели',\r\n    'Установка дверей',\r\n    'Установка окон',\r\n    'Остекление балконов',\r\n    'Навешивание полок и фурнитуры'\r\n  ],\r\n  [\r\n    'Помощь в покупке компьютера',\r\n    'Установка и удаление программ',\r\n    'Ремонт и замена оборудования',\r\n    'Подключение и настройка интернета'\r\n  ],\r\n  [\r\n    'Комплексная уборка помещения',\r\n    'Мытье окон',\r\n    'Прачечная'\r\n  ],\r\n]\r\n\r\nexport const buttonData = {\r\n  submit: 'Отправить'\r\n}","import {useState, useEffect} from 'react';\r\nimport cn from 'classnames';\r\nimport TaskFormSelect from './TaskFormSelect/TaskFormSelect';\r\nimport useTaskFetch from '../../hooks/useTaskFetch';\r\nimport {taskFormData, taskFormPlaceholders, taskButtonPlaceholders, taskFormLabels, taskFormTypeList, taskFormSubtypeList, buttonData} from '../../constants/formData';\r\n\r\nimport './TaskForm.css';\r\n\r\nconst TaskForm = (props) => {\r\n  // select states\r\n  const [workType, setWorkType] = useState(0);\r\n  const [workSubtype, setWorkSubtype] = useState(0);\r\n  const [workConfirmation, setWorkConfirmation] = useState(false);\r\n  const [workStatus, setWorkStatus] = useState(false);\r\n\r\n  // closing by clicking on wrapper\r\n  const closeByWrapper = (e) => {\r\n    !e.target.closest('.task-form') && props.formClose();\r\n  }\r\n\r\n  // set work type\r\n  const setType = (e) => {\r\n    // console.log('e.target - ' + e.target.value)\r\n    setWorkType(e.target.value);\r\n    setWorkSubtype(0);\r\n  }\r\n\r\n  // set work subtype\r\n  const setSubtype = (e) => {\r\n    // console.log('e.subtarget - ' + e.target.value)\r\n    setWorkSubtype(e.target.value);\r\n  }\r\n\r\n  const setConfirmation = () => {\r\n    setWorkConfirmation(!workConfirmation);\r\n  }\r\n\r\n  const setStatus = () => {\r\n    setWorkStatus(!workStatus);\r\n  }\r\n\r\n  // collect data to fetch\r\n  let selectedWorkType = taskFormTypeList[workType];\r\n  let selectedWorkSubtype = taskFormSubtypeList[workType][workSubtype];\r\n\r\n\r\n  console.log(selectedWorkType);\r\n  console.log(selectedWorkSubtype);\r\n  console.log('break');\r\n\r\n\r\n  return (\r\n    <div className={cn('task-form-wrapper', {'task-form-wrapper_visible': props.visibility})} onClick={closeByWrapper}>\r\n      <section className='task-form'>\r\n        <h2 className='task-form__title'>{taskFormData.title}</h2>\r\n        <ul className='task-form__list'>\r\n          <li className='task-form__list-item'>\r\n            <p className='task-form__field-note'>{taskFormData.workType}</p>\r\n            <TaskFormSelect name='work-type' label={taskFormLabels.workType} optionList={taskFormTypeList} selectOption={setType} />\r\n          </li>\r\n          <li className='task-form__list-item'>\r\n            <p className='task-form__field-note'>{taskFormData.workSubtype}</p>\r\n            <TaskFormSelect name='work-subtype' label={taskFormLabels.workSubtype} optionList={taskFormSubtypeList[workType]} selectOption={setSubtype} />\r\n          </li>\r\n          <li className='task-form__list-item'>\r\n            <p className='task-form__field-note'>{taskFormData.workDescription}</p>\r\n            <input type='text' required minLength='2' className='task-form__field-item' placeholder={taskFormPlaceholders.workDescription}></input>\r\n          </li>\r\n          <li className='task-form__list-item'>\r\n            <p className='task-form__field-note'>{taskFormData.name}</p>\r\n            <input type='text' required minLength='2' className='task-form__field-item' placeholder={taskFormPlaceholders.clientName}></input>\r\n          </li>\r\n          <li className='task-form__list-item'>\r\n            <p className='task-form__field-note'>{taskFormData.phone}</p>\r\n            <input type='text' required minLength='2' className='task-form__field-item' placeholder={taskFormPlaceholders.clientPhone}></input>\r\n          </li>\r\n          <li className='task-form__list-item'>\r\n            <p className='task-form__field-note'>{taskFormData.email}</p>\r\n            <input type='text' required minLength='2' className='task-form__field-item' placeholder={taskFormPlaceholders.clientEmail}></input>\r\n          </li>\r\n        </ul>\r\n        <div className='task-form__button-wrapper'>\r\n          <button className={cn('task-form__confirm-button', {'task-form__confirm-button_confirmed': !!workConfirmation})} onClick={setConfirmation}>{\r\n            workConfirmation ? taskButtonPlaceholders.confirmed : taskButtonPlaceholders.notConfirmed\r\n          }</button>\r\n          <button className={cn('task-form__confirm-button', {'task-form__confirm-button_confirmed': !!workStatus})} onClick={setStatus}>{\r\n            workStatus ? taskButtonPlaceholders.finished : taskButtonPlaceholders.notFinished\r\n          }</button>\r\n        </div>\r\n        <textarea className='task-form__feedback' name='feedback' disabled={workStatus} rows='4' placeholder={taskFormPlaceholders.clientFeedback} />\r\n        <button className='task-form__submit-button'>{buttonData.submit}</button>\r\n        <button className='task-form__close-button' onClick={props.formClose} />\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskForm;","import {useState} from 'react';\r\nimport Header from './Header/Header';\r\nimport Main from './Main/Main';\r\nimport About from './About/About';\r\nimport Poem from './Poem/Poem';\r\nimport Footer from './Footer/Footer';\r\nimport TaskForm from './TaskForm/TaskForm';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [taskShow, setTaskShow] = useState(false);\r\n\r\n  // show task popup\r\n  const showTaskPopup = () => {\r\n    setTaskShow(true)\r\n  }\r\n\r\n  // hide task popup\r\n  const hideTaskPopup = () => {\r\n    setTaskShow(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Main showTaskForm={showTaskPopup} hideTaskForm={hideTaskPopup} />\r\n      <About />\r\n      <Poem />\r\n      <Footer />\r\n      <TaskForm visibility={taskShow} formClose={hideTaskPopup} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}